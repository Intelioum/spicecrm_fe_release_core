/*
SpiceUI 1.1.0

This file is part of SpiceCRM in its "More" Editions and thus is licensed and copyrighted software. Your installation or use of this SpiceCRM file is subject to the license agreement you entered regaridng the use of SpiceCRM with aac services k.s or any of its affiliates and partners.

If you are unsure about your licese agreement please contat aac services k.s. at office@all-about-crm.com

Copyright (c) 2016-present, aac services.k.s - All rights reserved.
*/

"use strict";var __decorate=this&&this.__decorate||function(e,s,t,o){var i,l=arguments.length,n=l<3?s:null===o?o=Object.getOwnPropertyDescriptor(s,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,s,t,o);else for(var a=e.length-1;0<=a;a--)(i=e[a])&&(n=(l<3?i(n):3<l?i(s,t,n):i(s,t))||n);return 3<l&&n&&Object.defineProperty(s,t,n),n},__metadata=this&&this.__metadata||function(e,s){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,s)};Object.defineProperty(exports,"__esModule",{value:!0});var common_1=require("@angular/common"),core_1=require("@angular/core"),forms_1=require("@angular/forms"),rxjs_1=require("rxjs"),services_1=require("../../services/services"),directives_1=require("../../directives/directives"),services_2=require("../../services/services"),services_3=require("../../services/services"),services_4=require("../../services/services"),services_5=require("../../services/services"),services_6=require("../../services/services"),services_7=require("../../services/services"),services_8=require("../../services/services"),services_9=require("../../services/services"),services_10=require("../../services/services"),services_11=require("../../services/services"),services_12=require("../../services/services"),services_13=require("../../services/services"),objectfields_1=require("../../objectfields/objectfields"),globalcomponents_1=require("../../globalcomponents/globalcomponents"),objectcomponents_1=require("../../objectcomponents/objectcomponents"),systemcomponents_1=require("../../systemcomponents/systemcomponents"),UserChangePasswordButton=function(){function UserChangePasswordButton(e,s){this.language=e,this.modal=s}return UserChangePasswordButton.prototype.changePassword=function(){this.modal.openModal("UserChangePasswordModal")},UserChangePasswordButton=__decorate([core_1.Component({selector:"user-change-password-button",template:"<span>Change Password</span>",host:{class:"slds-button slds-button--neutral","(click)":"changePassword()"},styles:[":host {cursor:pointer;}"]}),__metadata("design:paramtypes",[services_2.language,services_8.modal])],UserChangePasswordButton)}();exports.UserChangePasswordButton=UserChangePasswordButton;var UserChangePasswordModal=function(){function UserChangePasswordModal(e,s,t,o){this.language=e,this.session=s,this.backend=t,this.toast=o,this.currentPassword="",this.newPassword="",this.repeatPassword="",this.pwdCheck=new RegExp("//"),this.pwdGuideline="",this.infoLoaded=!1,this.repFieldVisited=!1,this.self=void 0}return UserChangePasswordModal.prototype.ngOnInit=function(){this.getInfo()},Object.defineProperty(UserChangePasswordModal.prototype,"pwderror",{get:function(){return!!this.infoLoaded&&(!(!this.newPassword||this.pwdCheck.test(this.newPassword))&&this.language.getLabel("MSG_PWD_NOT_LEGAL"))},enumerable:!0,configurable:!0}),Object.defineProperty(UserChangePasswordModal.prototype,"pwdreperror",{get:function(){return this.newPassword!=this.repeatPassword&&this.language.getLabel("MSG_PWDS_DONT_MATCH")},enumerable:!0,configurable:!0}),UserChangePasswordModal.prototype.close=function(){this.self.destroy()},UserChangePasswordModal.prototype.canSave=function(){return!!this.infoLoaded&&(this.currentPassword&&this.newPassword&&!1===this.pwderror&&this.newPassword!==this.currentPassword&&!1===this.pwdreperror)},UserChangePasswordModal.prototype.save=function(){var s=this;if(this.canSave()){var e={currentpwd:this.currentPassword,newpwd:this.newPassword};this.backend.postRequest("user/password/change",{},e).subscribe(function(e){"success"===e.status?(s.toast.sendToast(s.language.getLabel("MSG_PWD_CHANGED_SUCCESSFULLY")),s.close()):s.toast.sendToast(s.language.getLabel("ERR_CHANGING_PWD"),"error",s.language.getLabel(e.lbl),10)})}},UserChangePasswordModal.prototype.getInfo=function(){var s=this;this.backend.getRequest("user/password/info",{lang:this.language.currentlanguage}).subscribe(function(e){s.pwdCheck=new RegExp(e.pwdCheck.regex),s.pwdGuideline=e.pwdCheck.guideline,s.infoLoaded=!0})},UserChangePasswordModal=__decorate([core_1.Component({selector:"user-changepassword-modal",template:'<section role="dialog" class="slds-modal slds-fade-in-open"><div class="slds-modal__container"><header class="slds-modal__header slds-theme_shade"><button class="slds-button slds-modal__close slds-button--icon-inverse" (click)="close()"><system-button-icon [icon]="\'close\'"></system-button-icon></button><h2 class="slds-text-heading--medium">{{language.getLabel(\'LBL_CHANGE_PWD\')}}</h2></header><div class="slds-modal__content slds-p-around--medium"><div class="slds-form--stacked slds-text-align--left" (submit)="save()"><div class="slds-form-element"><label class="slds-form-element__label">{{language.getLabel(\'LBL_OLD_PWD\')}}</label><div class="slds-form-element__control"><input type="password" class="slds-input" autocomplete="off" [(ngModel)]="currentPassword"></div></div><div *ngIf="pwdGuideline" class="slds-m-vertical--medium">{{language.getLabel(\'LBL_PWD_GUIDELINE\')}}:<br>{{pwdGuideline}}</div><div class="slds-form-element" [ngClass]="{\'slds-has-error\':pwderror}"><label class="slds-form-element__label">{{language.getLabel(\'LBL_NEW_PWD\')}}</label><div class="slds-form-element__control"><input type="password" class="slds-input" [(ngModel)]="newPassword"></div><div *ngIf="pwderror" class="slds-form-element__help">{{pwderror}}</div></div><div class="slds-form-element" [ngClass]="{\'slds-has-error\':repFieldVisited && pwdreperror}"><label class="slds-form-element__label">{{language.getLabel(\'LBL_NEW_PWD_REPEATED\')}}</label><div class="slds-form-element__control"><input type="password" class="slds-input" [(ngModel)]="repeatPassword" (blur)="repFieldVisited=true"></div></div><div *ngIf="repFieldVisited && pwdreperror" class="slds-form-element__help">{{pwdreperror}}</div></div></div><div class="slds-modal__footer"><button class="slds-button slds-button--neutral" (click)="close()">{{language.getLabel(\'LBL_CANCEL\')}}</button> <button class="slds-button slds-button--brand" [disabled]="!canSave()" (click)="save()">{{language.getLabel(\'LBL_SAVE\')}}</button></div></div></section>'}),__metadata("design:paramtypes",[services_2.language,services_9.session,services_5.backend,services_7.toast])],UserChangePasswordModal)}();exports.UserChangePasswordModal=UserChangePasswordModal;var UserPreferences=function(){function UserPreferences(e,s,t,o,i,l){var n=this;this.backend=e,this.view=s,this.toast=t,this.currency=o,this.language=i,this.prefservice=l,this.preferences={},this.names=["export_delimiter","default_export_charset","currency","default_currency_significant_digits","datef","timef","timezone","num_grp_sep","dec_sep","default_locale_name_format"],this.expanded={loc:!0,exp:!0,other:!0},this.exportDelimiterList=[",",";"],this.charsetlist=["BIG-5","CP1251","CP1252","EUC-CN","EUC-JP","EUC-KR","EUC-TW","ISO-2022-JP","ISO-2022-KR","ISO-8859-1","ISO-8859-2","ISO-8859-3","ISO-8859-4","ISO-8859-5","ISO-8859-6","ISO-8859-7","ISO-8859-8","ISO-8859-9","ISO-8859-10","ISO-8859-13","ISO-8859-14","ISO-8859-15","KOI8-R","KOI8-U","SJIS","UTF-8"],this.currencySignificantDigitsList=["1","2","3","4","5","6"],this.thousandDelimiterList=[",","."],this.dateFormatList=[{name:moment().format(this.prefservice.jsDateFormat2momentDateFormat("Y-m-d")),value:"Y-m-d"},{name:moment().format(this.prefservice.jsDateFormat2momentDateFormat("m-d-Y")),value:"m-d-Y"},{name:moment().format(this.prefservice.jsDateFormat2momentDateFormat("d-m-Y")),value:"d-m-Y"},{name:moment().format(this.prefservice.jsDateFormat2momentDateFormat("Y/m/d")),value:"Y/m/d"},{name:moment().format(this.prefservice.jsDateFormat2momentDateFormat("m/d/Y")),value:"m/d/Y"},{name:moment().format(this.prefservice.jsDateFormat2momentDateFormat("d/m/Y")),value:"d/m/Y"},{name:moment().format(this.prefservice.jsDateFormat2momentDateFormat("Y.m.d")),value:"Y.m.d"},{name:moment().format(this.prefservice.jsDateFormat2momentDateFormat("d.m.Y")),value:"d.m.Y"},{name:moment().format(this.prefservice.jsDateFormat2momentDateFormat("m.d.Y")),value:"m.d.Y"}],this.timeFormatList=[{name:moment().format(this.prefservice.jsTimeFormat2momentTimeFormat("H:i")),value:"H:i"},{name:moment().format(this.prefservice.jsTimeFormat2momentTimeFormat("h:ia")),value:"h:ia"},{name:moment().format(this.prefservice.jsTimeFormat2momentTimeFormat("h:iA")),value:"h:iA"},{name:moment().format(this.prefservice.jsTimeFormat2momentTimeFormat("h:i a")),value:"h:i a"},{name:moment().format(this.prefservice.jsTimeFormat2momentTimeFormat("h:i A")),value:"h:i A"},{name:moment().format(this.prefservice.jsTimeFormat2momentTimeFormat("H.i")),value:"H.i"},{name:moment().format(this.prefservice.jsTimeFormat2momentTimeFormat("h.ia")),value:"h.ia"},{name:moment().format(this.prefservice.jsTimeFormat2momentTimeFormat("h.iA")),value:"h.iA"},{name:moment().format(this.prefservice.jsTimeFormat2momentTimeFormat("h.i a")),value:"h.i a"},{name:moment().format(this.prefservice.jsTimeFormat2momentTimeFormat("h.i A")),value:"h.i A"}],this.currencyList=[],this.formattingsOfNumbers=[{show:"1.000.000,00",num_grp_sep:".",dec_sep:","},{show:"1,000,000.00",num_grp_sep:",",dec_sep:"."}],this.prefsLoaded=new rxjs_1.Subject,this.prefsLoaded.subscribe(function(){n.preferences=_.pick(n.prefservice.unchangedPreferences.global,n.names)}),this.prefservice.getPreferences(this.prefsLoaded),this.prefservice.needFormats(),this.backend.getRequest("/timezones").subscribe(function(e){n.timezones=e,n.timezoneKeys=Object.keys(n.timezones)}),this.currencyList=this.currency.getCurrencies(),this.view.isEditable=!0}return Object.defineProperty(UserPreferences.prototype,"datef",{get:function(){return this.preferences.datef?moment().format(this.prefservice.jsDateFormat2momentDateFormat(this.preferences.datef)):""},enumerable:!0,configurable:!0}),Object.defineProperty(UserPreferences.prototype,"timef",{get:function(){return this.preferences.timef?moment().format(this.prefservice.jsTimeFormat2momentTimeFormat(this.preferences.timef)):""},enumerable:!0,configurable:!0}),Object.defineProperty(UserPreferences.prototype,"formattingOfNumbers",{get:function(){return this.preferences.num_grp_sep&&this.preferences.dec_sep?"1"+this.preferences.num_grp_sep+"000"+this.preferences.num_grp_sep+"000"+this.preferences.dec_sep+"0".repeat(this.preferences.default_currency_significant_digits?this.preferences.default_currency_significant_digits:2):""},enumerable:!0,configurable:!0}),UserPreferences.prototype.setFormattingOfNumbers=function(e){""===e?this.preferences.num_grp_sep=this.preferences.dec_sep="":(this.preferences.num_grp_sep=this.formattingsOfNumbers[e].num_grp_sep,this.preferences.dec_sep=this.formattingsOfNumbers[e].dec_sep)},UserPreferences.prototype.cancel=function(){this.view.setViewMode()},UserPreferences.prototype.save=function(){var e=this;this.prefservice.setPreferences(this.preferences,!0).subscribe(function(){e.toast.sendToast(e.language.getLabel("LBL_DATA_SAVED"),"success"),e.preferences=_.pick(e.prefservice.unchangedPreferences.global,e.names)}),this.view.setViewMode()},UserPreferences.prototype.togglePanel=function(e){this.expanded[e]=!this.expanded[e]},UserPreferences.prototype.getTabStyle=function(e){if(!this.expanded[e])return{height:"0px",transform:"rotateX(90deg)"}},UserPreferences.prototype.getExampleText=function(t){var o="";return this.prefservice.formats.nameFormats&&this.prefservice.formats.nameFormats.some(function(e,s){if(t===e.name)return o=e.example,!0}),o},UserPreferences=__decorate([core_1.Component({selector:"user-preferences",template:'<div class="slds-section" [ngClass]="{\'slds-is-open\': expanded.loc}"><h3 class="slds-section__title"><button aria-controls="expando-unique-id" aria-expanded="true" class="slds-button slds-section__title-action" (click)="togglePanel(\'loc\')"><system-utility-icon [icon]="\'switch\'" [size]="\'x-small\'" [addclasses]="\'slds-section__title-action-icon slds-button__icon slds-button__icon_left\'"></system-utility-icon><span class="slds-truncate">{{ language.getLabel(\'LBL_LOCALE_PREFERENCES\') }}</span></button></h3><div><div [ngStyle]="getTabStyle(\'loc\')"><div class="slds-grid slds-grid--align-spread"><div class="slds-form-element slds-size--4-of-8 slds-p-around--x-small"><label class="slds-form-element__label">{{ language.getLabel(\'LBL_TIMEZONE\') }}</label><div *ngIf="!view.isEditMode()" class="slds-form-element__control slds-has-divider--bottom"><span class="slds-form-element__static">{{preferences.timezone}}</span> <button style="float: right" class="slds-button slds-button--icon slds-m-left--xx-small" (click)="view.setEditMode()"><system-button-icon [icon]="\'edit\'"></system-button-icon></button></div><div *ngIf="view.isEditMode()" class="slds-form-element__control"><div class="slds-select_container"><select class="slds-select" name="timezone" (change)="preferences.timezone = $event.srcElement.value"><option>-- select one --</option><option *ngFor="let timezoneKey of timezoneKeys" [value]="timezoneKey">{{timezoneKey}}</option></select></div></div></div><div class="slds-form-element slds-size--2-of-8 slds-p-around--x-small"><label class="slds-form-element__label">{{ language.getLabel(\'LBL_DATE_FORMAT\') }}</label><div *ngIf="!view.isEditMode()" class="slds-form-element__control slds-has-divider--bottom"><span class="slds-form-element__static">{{datef}}</span> <button style="float: right" class="slds-button slds-button--icon slds-m-left--xx-small" (click)="view.setEditMode()"><system-button-icon [icon]="\'edit\'"></system-button-icon></button></div><div *ngIf="view.isEditMode()" class="slds-form-element__control"><div class="slds-select_container"><select class="slds-select" (change)="preferences.datef = $event.srcElement.value"><option>-- select one --</option><option *ngFor="let item of dateFormatList" [value]="item.value" [selected]="preferences.datef == item.value">{{ item.name }}</option></select></div></div></div><div class="slds-form-element slds-size--2-of-8 slds-p-around--x-small"><label class="slds-form-element__label">{{ language.getLabel(\'LBL_TIME_FORMAT\') }}</label><div *ngIf="!view.isEditMode()" class="slds-form-element__control slds-has-divider--bottom"><span class="slds-form-element__static">{{timef}}</span> <button style="float: right" class="slds-button slds-button--icon slds-m-left--xx-small" (click)="view.setEditMode()"><system-button-icon [icon]="\'edit\'"></system-button-icon></button></div><div *ngIf="view.isEditMode()" class="slds-form-element__control"><div class="slds-select_container"><select class="slds-select" (change)="preferences.timef = $event.srcElement.value"><option>-- select one --</option><option *ngFor="let item of timeFormatList" [value]="item.value" [selected]="preferences.timef == item.value">{{ item.name }}</option></select></div></div></div></div><div class="slds-grid slds-grid--align-spread"><div class="slds-form-element slds-size--2-of-5 slds-p-around--x-small"><label class="slds-form-element__label">{{ language.getLabel(\'LBL_CURRENCY\') }}</label><div *ngIf="!view.isEditMode()" class="slds-form-element__control slds-has-divider--bottom"><span class="slds-form-element__static"><ng-container *ngFor="let item of currencyList">{{ item.id == preferences.currency ? item.name : \'\' }}</ng-container></span> <button style="float: right" class="slds-button slds-button--icon slds-m-left--xx-small" (click)="view.setEditMode()"><system-button-icon [icon]="\'edit\'"></system-button-icon></button></div><div *ngIf="view.isEditMode()" class="slds-form-element__control"><div class="slds-select_container"><select class="slds-select" (change)="preferences.currency = $event.srcElement.value"><option>-- select one --</option><option *ngFor="let item of currencyList" [value]="item.id" [selected]="preferences.currency == item.id">{{ item.name }}</option></select></div></div></div><div class="slds-form-element slds-size--1-of-5 slds-p-around--x-small"><label class="slds-form-element__label">{{ language.getLabel(\'LBL_DECIMAL_DIGITS\') }}</label><div *ngIf="!view.isEditMode()" class="slds-form-element__control slds-has-divider--bottom"><span class="slds-form-element__static">{{preferences.default_currency_significant_digits}}</span> <button style="float: right" class="slds-button slds-button--icon slds-m-left--xx-small" (click)="view.setEditMode()"><system-button-icon [icon]="\'edit\'"></system-button-icon></button></div><div *ngIf="view.isEditMode()" class="slds-form-element__control"><div class="slds-select_container"><select class="slds-select" (change)="preferences.default_currency_significant_digits = $event.srcElement.value"><option>-- select one --</option><option *ngFor="let item of currencySignificantDigitsList" [value]="item" [selected]="preferences.default_currency_significant_digits == item">{{ item }}</option></select></div></div></div><div class="slds-form-element slds-size--2-of-5 slds-p-around--x-small"><label class="slds-form-element__label">{{ language.getLabel(\'LBL_FORMATTING\') }}</label><div *ngIf="!view.isEditMode()" class="slds-form-element__control slds-has-divider--bottom"><span class="slds-form-element__static">{{formattingOfNumbers}}</span> <button style="float: right" class="slds-button slds-button--icon slds-m-left--xx-small" (click)="view.setEditMode()"><system-button-icon [icon]="\'edit\'"></system-button-icon></button></div><div *ngIf="view.isEditMode()" class="slds-form-element__control"><div class="slds-select_container"><select class="slds-select" (change)="setFormattingOfNumbers( $event.srcElement.value )"><option>-- select one --</option><option *ngFor="let item of formattingsOfNumbers; let i=index" [value]="i" [selected]="preferences.num_grp_sep === item.num_grp_sep && preferences.dec_sep === item.dec_sep">{{ item.show }}</option></select></div></div></div></div></div></div></div><div class="slds-section" [ngClass]="{\'slds-is-open\': expanded.exp}"><h3 class="slds-section__title"><button aria-controls="expando-unique-id" aria-expanded="true" class="slds-button slds-section__title-action" (click)="togglePanel(\'exp\')"><system-utility-icon [icon]="\'switch\'" [size]="\'x-small\'" [addclasses]="\'slds-section__title-action-icon slds-button__icon slds-button__icon_left\'"></system-utility-icon><span class="slds-truncate">{{ language.getLabel(\'LBL_EXPORT_PREFERENCES\') }}</span></button></h3><div [ngStyle]="getTabStyle(\'exp\')"><div class="slds-grid slds-grid--align-spread"><div class="slds-form-element slds-size--1-of-2 slds-p-around--x-small"><label class="slds-form-element__label">{{ language.getLabel(\'LBL_EXPORT_DELIMITER\') }}</label><div *ngIf="!view.isEditMode()" class="slds-form-element__control slds-has-divider--bottom"><span class="slds-form-element__static">{{ preferences.export_delimiter }}</span> <button style="float: right" class="slds-button slds-button--icon slds-m-left--xx-small" (click)="view.setEditMode()"><system-button-icon [icon]="\'edit\'"></system-button-icon></button></div><div *ngIf="view.isEditMode()" class="slds-form-element__control"><div class="slds-select_container"><select class="slds-select" (change)="preferences.export_delimiter = $event.srcElement.value"><option>-- select one --</option><option *ngFor="let item of exportDelimiterList" [value]="item" [selected]="preferences.export_delimiter == item">{{ item }}</option></select></div></div></div><div class="slds-form-element slds-size--1-of-2 slds-p-around--x-small"><label class="slds-form-element__label">{{ language.getLabel(\'LBL_EXPORT_CHARSET\') }}</label><div *ngIf="!view.isEditMode()" class="slds-form-element__control slds-has-divider--bottom"><span class="slds-form-element__static">{{preferences.default_export_charset}}</span> <button style="float: right" class="slds-button slds-button--icon slds-m-left--xx-small" (click)="view.setEditMode()"><system-button-icon [icon]="\'edit\'"></system-button-icon></button></div><div *ngIf="view.isEditMode()" class="slds-form-element__control"><div class="slds-select_container"><select class="slds-select" (change)="preferences.default_export_charset = $event.srcElement.value"><option>-- select one --</option><option *ngFor="let item of charsetlist" [selected]="item == preferences.default_export_charset" [value]="item">{{ item}}</option></select></div></div></div></div></div></div><div class="slds-section" [ngClass]="{\'slds-is-open\': expanded.other}"><h3 class="slds-section__title"><button aria-controls="expando-unique-id" aria-expanded="true" class="slds-button slds-section__title-action" (click)="togglePanel(\'other\')"><system-utility-icon [icon]="\'switch\'" [size]="\'x-small\'" [addclasses]="\'slds-section__title-action-icon slds-button__icon slds-button__icon_left\'"></system-utility-icon><span class="slds-truncate">{{ language.getLabel(\'LBL_OTHER_PREFERENCES\') }}</span></button></h3><div [ngStyle]="getTabStyle(\'other\')"><div class="slds-grid slds-grid--align-spread"><div class="slds-form-element slds-size--3-of-9 slds-p-around--x-small"><label class="slds-form-element__label">{{ language.getLabel(\'LBL_NAME_FORMAT\') }}</label><div *ngIf="!view.isEditMode()" class="slds-form-element__control slds-has-divider--bottom"><span class="slds-form-element__static">{{getExampleText( preferences.default_locale_name_format )}}</span> <button style="float: right" class="slds-button slds-button--icon slds-m-left--xx-small" (click)="view.setEditMode()"><system-button-icon [icon]="\'edit\'"></system-button-icon></button></div><div *ngIf="view.isEditMode()" class="slds-form-element__control"><div class="slds-select_container"><select class="slds-select" name="timezone" (change)="preferences.default_locale_name_format = $event.srcElement.value"><option>-- select one --</option><option *ngFor="let item of prefservice.formats.nameFormats" value="{{item.name}}" [selected]="item.name == preferences.default_locale_name_format">{{item.example}}</option></select></div></div></div></div></div></div><div *ngIf="view.isEditMode()" class="slds-p-around--small slds-align--absolute-center"><button class="slds-button slds-button--neutral" (click)="cancel()">{{language.getLabel(\'LBL_CANCEL\')}}</button> <button class="slds-button slds-button--brand slds-button-space-left" (click)="save()">{{language.getLabel(\'LBL_SAVE\')}}</button></div>',styles:[".slds-button--icon {\n            color: #eeeeee\n        }\n\n        .slds-button--icon:hover {\n            color: #5B5B5B\n        }"],providers:[services_3.view]}),__metadata("design:paramtypes",[services_5.backend,services_3.view,services_7.toast,services_13.currency,services_2.language,services_11.userpreferences])],UserPreferences)}();exports.UserPreferences=UserPreferences;var UserRoles=function(){function UserRoles(e,s,t,o,i,l,n,a){var r=this;this.backend=e,this.view=s,this.toast=t,this.modal=o,this.model=i,this.session=l,this.broadcast=n,this.language=a,this.userRoles=[],this.noneUserRoles=[],this.backend.getRequest("spiceui/core/roles/"+this.model.id).subscribe(function(i){r.userRoles=i.allRoles.filter(function(e){for(var s=0,t=i.userRoles;s<t.length;s++){var o=t[s];if(e.id==o.sysuirole_id)return e.defaultrole=o.defaultrole,!0}return!1}),r.noneUserRoles=i.allRoles.filter(function(e){for(var s=0,t=r.userRoles;s<t.length;s++){var o=t[s];if(e.id==o.id)return!1}return!0}),r.noneUserRoles.map(function(e){return e.defaultrole="0"})})}return UserRoles.prototype.addNew=function(e){var t=this;this.session.authData.admin&&this.modal.openModal("UserRolesAddModal").subscribe(function(e){e.instance.user_id=t.model.data.id,e.instance.noneUserRoles=t.noneUserRoles,e.instance.response.subscribe(function(s){s&&"object"==typeof s&&(t.userRoles.push(s),1===t.userRoles.length&&t.setDefaultRole(s.id)),s&&"string"==typeof s&&(t.noneUserRoles=t.noneUserRoles.filter(function(e){return e.id!=s}))})})},UserRoles.prototype.delete=function(t,s,e){var o=this;this.session.authData.admin&&!e&&this.modal.confirm(this.language.getLabel("MSG_DELETE_RECORD","","long"),this.language.getLabel("MSG_DELETE_RECORD")).subscribe(function(e){e&&o.backend.deleteRequest("spiceui/core/roles/"+s+"/"+o.model.data.id).subscribe(function(e){if("error"==e.status)return o.toast.sendToast(e.message,"error"),!1;var s=o.userRoles.splice(t,1);o.noneUserRoles.push(s[0]),o.toast.sendToast(o.language.getLabel("MSG_SUCCESSFULLY_DELETED"),"success")},function(e){return o.toast.sendToast(o.language.getLabel("ERR_CANT_DELETE"),"error")})})},UserRoles.prototype.setDefaultRole=function(s){this.session.authData.admin&&(this.userRoles.every(function(e){return e.id==s?e.defaultrole="1":e.defaultrole="0",!0}),this.backend.postRequest("spiceui/core/roles/"+s+"/"+this.model.data.id+"/default"))},UserRoles=__decorate([core_1.Component({selector:"user-roles",template:'<div><table class="slds-table slds-table_bordered slds-table_cell-buffer" style="box-shadow:0px 2px 5px 0 rgba(0,0,0,.1); border-radius: .15rem"><thead class="slds-table--bordered slds-text-align_center"><tr class="slds-text-title--caps"><th></th><th style="padding: .75rem 1rem">{{ language.getLabel(\'LBL_NAME\') }}</th><th colspan="2">{{ language.getLabel(\'LBL_DEFAULT\') }}</th></tr></thead><tbody><tr *ngFor="let role of userRoles; let roleIndex = index" class="slds-hint-parent"><ng-container><td style="padding-left: 1rem; width: 1.5rem"><span class="slds-avatar slds-avatar--small slds-align--absolute-center {{role.icon}}" style="margin: 0">{{(role.label) ? language.getAppLanglabel(role.label, \'short\') : role.name.substring(0, 2) | uppercase}}</span></td><td style="padding: .75rem 1rem">{{ language.getAppLanglabel(role.label) || role.name }}</td><td class="slds-text-align_center" style="width: 5rem"><span class="slds-checkbox"><input type="checkbox" [disabled]="!session.authData.admin" [id]="role.name" [ngModel]="(role.defaultrole == \'1\') ? true: false" (change)="setDefaultRole(role.id)" (click)="$event.srcElement.checked = true"> <label class="slds-checkbox__label" [for]="role.name" style="cursor: pointer"><span class="slds-checkbox_faux"></span></label></span></td><td *ngIf="session.authData.admin" style="padding-right: 1rem;width: 35px"><button [disabled]="role.defaultrole == \'1\'" class="slds-button slds-button--icon" (click)="delete(roleIndex, role.id, (role.defaultrole == \'1\'))"><system-button-icon [icon]="\'delete\'"></system-button-icon></button></td></ng-container></tr></tbody></table><div *ngIf="noneUserRoles.length > 0 && session.authData.admin" class="slds-p-around--small slds-align--absolute-center"><button #deletebtn class="slds-button slds-button--brand slds-button-space-left" (click)="addNew($event)">{{language.getLabel(\'LBL_NEW_ROLE\')}}</button></div></div>',providers:[services_3.view]}),__metadata("design:paramtypes",[services_5.backend,services_3.view,services_7.toast,services_8.modal,services_6.model,services_9.session,services_10.broadcast,services_2.language])],UserRoles)}();exports.UserRoles=UserRoles;var UserRolesAddModal=function(){function UserRolesAddModal(e,s,t,o,i,l,n){this.language=e,this.model=s,this.modelutilities=t,this.toast=o,this.backend=i,this.view=l,this.metadata=n,this.user_id="",this.noneUserRoles=[],this.selectedRoles=[],this.sysuirole_id="",this.response=null,this.responseSubject=null,this.responseSubject=new rxjs_1.Subject,this.response=this.responseSubject.asObservable()}return UserRolesAddModal.prototype.setSelectedRole=function(e,s){this.noneUserRoles.splice(e,1),this.selectedRoles.push(s)},UserRolesAddModal.prototype.removeSelectedRole=function(e,s){this.selectedRoles.splice(e,1),this.noneUserRoles.push(s)},UserRolesAddModal.prototype.setRole=function(e){this.sysuirole_id=e},UserRolesAddModal.prototype.cancel=function(){this.responseSubject.next(!1),this.responseSubject.complete(),this.self.destroy()},UserRolesAddModal.prototype.onModalEscX=function(){this.cancel()},UserRolesAddModal.prototype.add=function(){var t=this;if(0==this.sysuirole_id.length)return this.toast.sendToast(this.language.getLabel("LBL_MAKE_SELECTION")),!1;this.backend.postRequest("/spiceui/core/roles/"+this.sysuirole_id+"/"+this.user_id+"/new").subscribe(function(e){var s;"error"==e.status&&(t.toast.sendToast(e.message,"error"),t.responseSubject.complete(),t.self.destroy()),t.noneUserRoles.every(function(e){return e.id==t.sysuirole_id&&(s=e),!0}),t.responseSubject.next(s),t.responseSubject.next(t.sysuirole_id),t.responseSubject.complete(),t.self.destroy(),t.toast.sendToast(t.language.getLabel("MSG_SUCCESSFULLY_ADDED"),"success")},function(e){t.toast.sendToast("Error, try again later","error"),console.log(e),t.self.destroy()})},__decorate([core_1.Input(),__metadata("design:type",Object)],UserRolesAddModal.prototype,"user_id",void 0),__decorate([core_1.Input(),__metadata("design:type",Array)],UserRolesAddModal.prototype,"noneUserRoles",void 0),UserRolesAddModal=__decorate([core_1.Component({selector:"user-roles-add-modal",template:'<system-modal><system-modal-header (close)="cancel()">{{language.getLabel(\'LBL_NEW_ROLE\') }}</system-modal-header><system-modal-content><div class="slds-grid--pull-padded"><div class="slds-form-element slds-m-vertical--xxx-small slds-m-horizontal--small"><label class="slds-form-element__label">{{ language.getLabel(\'LBL_ROLES\') }}</label><div class="slds-form-element__control"><div class="slds-select_container"><select class="slds-select" (change)="setRole($event.srcElement.value)"><option>&mdash; select role &mdash;</option><option *ngFor="let role of noneUserRoles" [value]="role.id">{{ ( (role.label) ? language.getAppLanglabel(role.label, \'short\') : role.name.substring(0, 2) | uppercase ) +\' \'+ role.name }}</option></select></div></div></div></div></system-modal-content><system-modal-footer><button class="slds-button slds-button--neutral" (click)="cancel()">{{language.getLabel(\'LBL_CANCEL\')}}</button> <button class="slds-button slds-button--brand" (click)="add()">{{language.getLabel(\'LBL_ADD\')}}</button></system-modal-footer></system-modal>',providers:[services_6.model,services_3.view]}),__metadata("design:paramtypes",[services_2.language,services_6.model,services_12.modelutilities,services_7.toast,services_5.backend,services_3.view,services_4.metadata])],UserRolesAddModal)}();exports.UserRolesAddModal=UserRolesAddModal;var UserAddButton=function(){function UserAddButton(e,s,t){this.modal=e,this.language=s,this.model=t}return UserAddButton.prototype.addUser=function(){this.modal.openModal("UserAddModal")},UserAddButton=__decorate([core_1.Component({template:"<span>{{language.getLabel('LBL_NEW')}}</span>",host:{class:"slds-button slds-button--neutral","(click)":"addUser()"},styles:[":host >>> {cursor:pointer;}"]}),__metadata("design:paramtypes",[services_8.modal,services_2.language,services_6.model])],UserAddButton)}();exports.UserAddButton=UserAddButton;var UserAddModal=function(){function UserAddModal(e,s,t,o,i,l,n,a){this.language=e,this.model=s,this.modelutilities=t,this.toast=o,this.backend=i,this.view=l,this.cdr=n,this.metadata=a,this.componentconfig={},this.informationFieldset=[],this.profileFieldset=[],this.response=null,this.responseSubject=null,this.expanded={profile:!0,password:!0,info:!0},this.password=void 0,this.repeatPassword=void 0,this.pwdCheck=new RegExp("//"),this.userNameCheck=new RegExp("^(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]{1,60}$"),this.pwdGuideline=void 0,this.infoLoaded=!1,this.passwordAction="auto",this.saveTriggered=!1,this.model.module="Users",this.view.isEditable=!0,this.view.setEditMode(),this.responseSubject=new rxjs_1.Subject,this.response=this.responseSubject.asObservable()}return Object.defineProperty(UserAddModal.prototype,"pwderror",{get:function(){return!(!this.password||this.pwdCheck.test(this.password))&&"Password does not match the Guideline."},enumerable:!0,configurable:!0}),Object.defineProperty(UserAddModal.prototype,"pwdreperror",{get:function(){return this.password!=this.repeatPassword&&"Inputs for the new Password does not match."},enumerable:!0,configurable:!0}),Object.defineProperty(UserAddModal.prototype,"saveData",{get:function(){var e={};for(var s in this.model.data)e[s]=this.modelutilities.spice2backend("Users",s,this.model.data[s]);return e},enumerable:!0,configurable:!0}),UserAddModal.prototype.ngOnInit=function(){var e=this.model.generateGuid();this.model.id=e,this.model.data.id=e,this.model.data.UserType="RegularUser",this.model.data.status="Active",this.getComponentConfig(),this.getInfo()},UserAddModal.prototype.ngAfterViewChecked=function(){this.cdr.detectChanges()},UserAddModal.prototype.getComponentConfig=function(){this.componentconfig=this.metadata.getComponentConfig("UserAddModal","Users"),this.componentconfig.profile&&(this.profileFieldset=this.componentconfig.profile),this.componentconfig.information&&(this.informationFieldset=this.componentconfig.information)},UserAddModal.prototype.getInfo=function(){var s=this;this.backend.getRequest("user/password/info",{lang:this.language.currentlanguage}).subscribe(function(e){s.pwdCheck=new RegExp(e.pwdCheck.regex),s.pwdGuideline=e.pwdCheck.guideline,s.infoLoaded=!0})},UserAddModal.prototype.cancel=function(){this.responseSubject.next(!1),this.responseSubject.complete(),this.self.destroy()},UserAddModal.prototype.onModalEscX=function(){this.cancel()},UserAddModal.prototype.togglePanel=function(e){this.expanded[e]=!this.expanded[e]},UserAddModal.prototype.getTabStyle=function(e){if(!this.expanded[e])return{height:"0px",transform:"rotateX(90deg)"}},UserAddModal.prototype.save=function(t){var o=this;if(void 0===t&&(t=!1),this.saveTriggered=!0,this.setDefaultModelData(),!this.checkErrors())return!1;this.backend.postRequest("module/Users/"+this.model.id,{},JSON.stringify(this.saveData)).subscribe(function(e){for(var s in e)e[s]=o.modelutilities.backend2spice("Users",s,e[s]);o.model.data=e,o.model.endEdit(),o.savePassword(t)},function(e){e.error.error.message&&(o.addcontainer.element.nativeElement.scrollTop=0,o.model.setFieldMessage("error",e.error.error.message,"email1","validation"))})},UserAddModal.prototype.setDefaultModelData=function(){this.model.data.system_generated_password="auto"==this.passwordAction,this.model.data.date_entered=new moment,this.model.data.date_modified=new moment,this.model.data.pwd_last_changed=new moment},UserAddModal.prototype.checkErrors=function(){var e=!0;return this.infoLoaded&&this.pwderror&&(e=!1),"select"==this.passwordAction&&(this.password&&!this.pwdreperror||(e=!1)),this.model.validate()||(e=!1),this.model.data.user_name&&!this.userNameCheck.test(this.model.data.user_name)&&(this.model.setFieldMessage("error","Only characters A-Z, a-z, numbers 1-9, dot, and underscore.","user_name","validation"),e=!1),e},UserAddModal.prototype.savePassword=function(s){var t=this;this.backend.postRequest("user/password/new",{},{newpwd:this.password,userId:this.model.id,SystemGeneratedPassword:this.model.data.system_generated_password}).subscribe(function(e){e.status?("auto"==t.passwordAction?t.toast.sendToast("An Email with the new password was successfully sent, check your inbox","success","",5):t.toast.sendToast("Data saved","success"),s&&t.model.goToDetail(),t.self.destroy()):t.toast.sendToast(e.message,"error")})},__decorate([core_1.ViewChild("addcontainer",{read:core_1.ViewContainerRef}),__metadata("design:type",core_1.ViewContainerRef)],UserAddModal.prototype,"addcontainer",void 0),UserAddModal=__decorate([core_1.Component({template:'<system-modal size="large"><system-modal-header (close)="cancel()">{{model.module}}</system-modal-header><system-modal-content #addcontainer><div class="slds-section" [ngClass]="{\'slds-is-open\': expanded.profile, \'slds-is-closed\': !expanded.profile}"><h3 class="slds-section__title"><button aria-controls="expando-unique-id" aria-expanded="true" class="slds-button slds-section__title-action" (click)="togglePanel(\'profile\')"><system-utility-icon [icon]="\'switch\'" [size]="\'x-small\'" [addclasses]="\'slds-section__title-action-icon slds-button__icon slds-button__icon_left\'"></system-utility-icon><span class="slds-truncate" title="Section Title">User Profile</span></button></h3><div [ngStyle]="getTabStyle(\'profile\')"><object-record-fieldset [fieldset]="profileFieldset" [direction]="\'vertical\'"></object-record-fieldset></div></div><div class="slds-section" [ngClass]="{\'slds-is-open\': expanded.password, \'slds-is-closed\': !expanded.password}"><h3 class="slds-section__title"><button aria-controls="expando-unique-id" aria-expanded="true" class="slds-button slds-section__title-action" (click)="togglePanel(\'password\')"><system-utility-icon [icon]="\'switch\'" [size]="\'x-small\'" [addclasses]="\'slds-section__title-action-icon slds-button__icon slds-button__icon_left\'"></system-utility-icon><span class="slds-truncate" title="Section Title">User Password</span></button></h3><div [ngStyle]="getTabStyle(\'password\')"><div class="slds-size--1-of-2"><div class="slds-p-around--x-small"><div class="slds-form-element"><div class="slds-form-element__control"><span class="slds-radio"><input type="radio" id="passwordActionAuto" value="auto" name="passwordAction" [(ngModel)]="passwordAction"> <label class="slds-radio__label" for="passwordActionAuto"><span class="slds-radio--faux"></span> <span class="slds-form-element__label">{{language.getLabel(\'LBL_AUTO_GENERATE\')}}</span></label></span> <span class="slds-radio"><input type="radio" id="passwordActionselect" value="select" name="passwordAction" [(ngModel)]="passwordAction"> <label class="slds-radio__label" for="passwordActionselect"><span class="slds-radio--faux"></span> <span class="slds-form-element__label">{{language.getLabel(\'LBL_SELECT\')}}</span></label></span></div></div><div *ngIf="passwordAction == \'select\'" class="slds-form--stacked slds-text-align--left"><div *ngIf="pwdGuideline" class="slds-m-vertical--medium">{{language.getLabel(\'LBL_PWD_GUIDELINE\')}}<br>{{pwdGuideline}}</div><div class="slds-form-element slds-m-vertical--small" [ngClass]="{\'slds-has-error\': (passField.touched && passField.dirty && pwderror) || (passwordAction == \'select\' && !password && saveTriggered)}"><div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--left"><system-utility-icon [icon]="\'lock\'" [addclasses]="\'slds-input__icon slds-icon-text-default\'"></system-utility-icon><input #passField="ngModel" type="password" [(ngModel)]="password" class="slds-input slds-p-horizontal--large slds-p-vertical--small" placeholder="enter new password"></div><div *ngIf="passField.touched && passField.dirty && pwderror" class="slds-form-element__help slds-text-color--error">{{pwderror}}</div><div *ngIf="passwordAction == \'select\' && !password && saveTriggered" class="slds-media slds-media-center slds-inline_icon_text slds-form-element__help slds-m-top--x-small"><div class="slds-media__figure"><span class="slds-icon_container"><system-utility-icon [icon]="\'error\'" [size]="\'x-small\'" [colorclass]="\'slds-icon-text-error\'"></system-utility-icon></span></div><div class="slds-media__body">Input Required!</div></div></div><div class="slds-form-element slds-m-vertical--small" [ngClass]="{\'slds-has-error\': (repPassField.touched && repPassField.dirty && pwdreperror) || (passwordAction == \'select\' && !repeatPassword && saveTriggered)}"><div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--left"><system-utility-icon [icon]="\'lock\'" [addclasses]="\'slds-input__icon slds-icon-text-default\'"></system-utility-icon><input type="password" #repPassField="ngModel" [(ngModel)]="repeatPassword" class="slds-input slds-p-horizontal--large slds-p-vertical--small" placeholder="repeat new password"></div><div *ngIf="repPassField.touched && repPassField.dirty && pwdreperror" class="slds-form-element__help slds-text-color--error">{{pwdreperror}}</div><div *ngIf="passwordAction == \'select\' && !repeatPassword && saveTriggered" class="slds-media slds-media-center slds-inline_icon_text slds-form-element__help slds-m-top--x-small"><div class="slds-media__figure"><span class="slds-icon_container"><system-utility-icon [icon]="\'error\'" [size]="\'x-small\'" [colorclass]="\'slds-icon-text-error\'"></system-utility-icon></span></div><div class="slds-media__body">Input Required!</div></div></div></div></div></div></div></div><div class="slds-section" [ngClass]="{\'slds-is-open\': expanded.info, \'slds-is-closed\': !expanded.info}"><h3 class="slds-section__title"><button aria-controls="expando-unique-id" aria-expanded="true" class="slds-button slds-section__title-action" (click)="togglePanel(\'info\')"><system-utility-icon [icon]="\'switch\'" [size]="\'x-small\'" [addclasses]="\'slds-section__title-action-icon slds-button__icon slds-button__icon_left\'"></system-utility-icon><span class="slds-truncate" title="Section Title">User Information</span></button></h3><div [ngStyle]="getTabStyle(\'info\')"><object-record-fieldset [fieldset]="informationFieldset" [direction]="\'vertical\'"></object-record-fieldset></div></div></system-modal-content><system-modal-footer><button class="slds-button slds-button--neutral" (click)="cancel()">{{language.getLabel(\'LBL_CANCEL\')}}</button> <button class="slds-button slds-button--brand" (click)="save()">{{language.getLabel(\'LBL_SAVE\')}}</button> <button class="slds-button slds-button--brand" (click)="save(true)">{{language.getLabel(\'LBL_SAVE_AND_GO_TO_RECORD\')}}</button></system-modal-footer></system-modal>',providers:[services_6.model,services_3.view]}),__metadata("design:paramtypes",[services_2.language,services_6.model,services_12.modelutilities,services_7.toast,services_5.backend,services_3.view,core_1.ChangeDetectorRef,services_4.metadata])],UserAddModal)}();exports.UserAddModal=UserAddModal;var ModuleUsers=function(){function ModuleUsers(e){this.vms=e,this.version="1.0",this.build_date="2018-10-25",this.vms.registerModule(this)}return ModuleUsers=__decorate([core_1.NgModule({imports:[common_1.CommonModule,forms_1.FormsModule,objectfields_1.ObjectFields,globalcomponents_1.GlobalComponents,objectcomponents_1.ObjectComponents,systemcomponents_1.SystemComponents,directives_1.DirectivesModule],declarations:[UserChangePasswordButton,UserChangePasswordModal,UserPreferences,UserRoles,UserRolesAddModal,UserAddButton,UserAddModal]}),__metadata("design:paramtypes",[services_1.VersionManagerService])],ModuleUsers)}();exports.ModuleUsers=ModuleUsers;